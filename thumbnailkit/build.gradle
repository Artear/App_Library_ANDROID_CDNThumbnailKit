buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.15"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'org.jetbrains.dokka-android'

ext {
    bintrayRepo = 'Android'
    bintrayName = 'CDNThumbnailKit'

    publishedGroupId = 'com.artear.thumbnailkit'
    libraryName = 'CDNThumbnailKit'
    artifact = 'thumbnailkit'

    libraryDescription = 'Thumbnail Strategy for multi content delivery network'

    siteUrl = 'https://github.com/Artear/App_Library_ANDROID_CDNThumbnailKit'
    gitUrl = 'https://github.com/Artear/App_Library_ANDROID_CDNThumbnailKit.git'

    libraryVersion = '0.2.0'

    developerId = 'artear'
    developerName = 'Artear Moviles'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 4
        versionName "ThumbnailKit"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'

    testImplementation 'junit:junit:4.12'

    implementation 'com.artear.tools:tools:0.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

group = publishedGroupId  // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

version = libraryVersion

if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {

    Properties properties = new Properties()
    try {

        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception ignored) {
    }
    user = properties.stringPropertyNames().contains('bintray.user') ?
            properties.getProperty('bintray.user') : System.getenv('BINTRAY_USER')
    key = properties.stringPropertyNames().contains('bintray.apikey') ?
            properties.getProperty('bintray.apikey') : System.getenv('BINTRAY_API_KEY')

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}